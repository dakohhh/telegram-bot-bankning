"""updated message role type to enum on message model

Revision ID: 3049092373df
Revises: 9319ddbb562c
Create Date: 2025-05-14 13:19:27.977744

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel



# revision identifiers, used by Alembic.
revision: str = '3049092373df'
down_revision: Union[str, None] = '9319ddbb562c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE message ALTER COLUMN role TYPE TEXT USING role::TEXT")

    # Step 2: Fix invalid values
    op.execute("UPDATE message SET role = 'USER' WHERE role NOT IN ('USER', 'ASSISTANT', 'SYSTEM')")

    new_enum_values = ('USER', 'ASSISTANT', 'SYSTEM')
    new_enum_type = sa.Enum(*new_enum_values, name='messagerole')
    new_enum_type.create(op.get_bind())

    # Convert role column back to new ENUM with explicit casting
    op.execute("ALTER TABLE message ALTER COLUMN role TYPE messagerole USING role::messagerole")

    op.alter_column('message', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('USER', 'ASSISTANT', 'SYSTEM', name='messagerole'),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('message', 'role',
               existing_type=sa.Enum('USER', 'ASSISTANT', 'SYSTEM', name='messagerole'),
               type_=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###